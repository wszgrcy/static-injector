[
    {
        "glob": true,
        "fileName": "./import/**/*.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "ConditionalExpression:has(>Identifier[value=ngDevMode])",
                    "replaceSelector": ">ColonToken+*"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ExpressionStatement:like(ngDevMode)"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "IfStatement:has(>BinaryExpression:like(ngDevMode),>Identifier:like(ngDevMode))>CloseParenToken+Block",
                    "content": "{}"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "IfStatement:has(>BinaryExpression:like(ngDevMode),>Identifier:like(ngDevMode))>OpenParenToken+*",
                    "content": "false"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "ThrowStatement NewExpression:has(>::expression[value=RuntimeError]) SyntaxList[value*=ngDevMode] PropertyAccessExpression+CommaToken+*",
                    "content": "null"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ImportSpecifier:has(>::name[value=assertNotEqual])<SyntaxList<NamedImports<ImportClause<ImportDeclaration"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration[value*=\"ng_dev_mode\"]"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/output/output_ast.ts",
        "rules": [
            {
                "type": "class",
                "change": "remove",
                "values": {
                    "excludes": [
                        "TaggedTemplateExpr",
                        "PlaceholderPiece",
                        "LocalizedString",
                        "RecursiveAstVisitor"
                    ]
                }
            },
            {
                "type": "type",
                "change": "remove",
                "values": {
                    "excludes": [
                        "MessagePiece"
                    ]
                }
            },
            {
                "type": "class-method",
                "change": "remove",
                "values": {
                    "excludes": [
                        "instantiate",
                        "conditional",
                        "equals",
                        "notEquals",
                        "identical",
                        "notIdentical",
                        "minus",
                        "plus",
                        "divide",
                        "multiply",
                        "modulo",
                        "and",
                        "bitwiseAnd",
                        "or",
                        "lower",
                        "lowerEquals",
                        "bigger",
                        "biggerEquals",
                        "isBlank",
                        "nullishCoalesce"
                    ]
                }
            },
            {
                "type": "function",
                "change": "remove",
                "values": {
                    "excludes": [
                        "taggedTemplate",
                        "localizedString"
                    ]
                }
            },
            {
                "type": "interface-method",
                "change": "remove",
                "values": {
                    "excludes": [
                        "visitTaggedTemplateExpr",
                        "visitLocalizedString"
                    ]
                }
            },
            {
                "type": "variable",
                "change": "remove",
                "values": {
                    "excludes": [
                        "MEANING_SEPARATOR",
                        "ID_SEPARATOR",
                        "LEGACY_ID_INDICATOR"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "excludes": [
                        "computeMsgId",
                        "Message",
                        "I18nMeta"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/render3/partial/api.ts",
        "rules": [
            {
                "type": "interface",
                "change": "remove",
                "values": {
                    "excludes": [
                        "R3DeclareDirectiveMetadata",
                        "R3DeclareComponentMetadata",
                        "R3DeclareDirectiveDependencyMetadata",
                        "R3DeclarePipeDependencyMetadata",
                        "R3DeclareNgModuleDependencyMetadata",
                        "R3DeclareQueryMetadata",
                        "R3DeclareNgModuleMetadata",
                        "R3DeclarePipeMetadata",
                        "R3DeclareHostDirectiveMetadata"
                    ]
                }
            },
            {
                "type": "type",
                "change": "remove",
                "values": {
                    "excludes": [
                        "R3DeclareTemplateDependencyMetadata"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ChangeDetectionStrategy"
                    ]
                }
            },
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "InterfaceDeclaration:has(>::name[value=R3DeclareDependencyMetadata]) PropertySignature:has(>::name[value=host])",
                    "removeComment": true
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/render3/view/util.ts",
        "rules": [
            {
                "type": "variable",
                "change": "remove",
                "values": {
                    "excludes": [
                        "UNSAFE_OBJECT_KEY_NAME_REGEXP",
                        "TEMPORARY_NAME",
                        "CONTEXT_NAME",
                        "RENDER_FLAGS",
                        "REFERENCE_PREFIX",
                        "IMPLICIT_REFERENCE",
                        "NON_BINDABLE_ATTR",
                        "RESTORED_VIEW_CONTEXT_NAME",
                        "MAX_CHAIN_LENGTH",
                        "CHAINABLE_INSTRUCTIONS"
                    ]
                }
            },
            {
                "type": "type",
                "change": "remove",
                "values": {
                    "excludes": [
                        "InstructionParams"
                    ]
                }
            },
            {
                "type": "interface",
                "change": "remove",
                "values": {
                    "excludes": [
                        "Instruction"
                    ]
                }
            },
            {
                "type": "function",
                "change": "remove",
                "values": {
                    "excludes": [
                        "invokeInstruction",
                        "temporaryAllocator",
                        "invalid",
                        "asLiteral",
                        "conditionallyCreateMapObjectLiteral",
                        "mapToExpression",
                        "trimTrailingNulls",
                        "getQueryPredicate",
                        "getAttrsForDirectiveMatching",
                        "getInterpolationArgsLength",
                        "getInstructionStatements",
                        "conditionallyCreateDirectiveBindingLiteral",
                        "createCssSelectorFromNode",
                        "getInputFlagExpr",
                        "bitwiseOrInputFlagsExpr"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ConstantPool",
                        "Interpolation",
                        "ParseSourceSpan",
                        "splitAtColon",
                        "R3",
                        "ForwardRefHandling",
                        "R3QueryMetadata",
                        "isI18nAttribute",
                        "splitNsName",
                        "CssSelector"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "namespaces": [
                        "t"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/render3/r3_factory.ts",
        "rules": [
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "InterfaceDeclaration:has(>::name[value=R3DependencyMetadata]) PropertySignature:has(>::name[value=host])",
                    "removeComment": true
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "FunctionDeclaration:has(>::name[value=compileInjectDependency]) BinaryExpression:has(>::right[value=\"FactoryTarget.Pipe\"])<ConditionalExpression<ParenthesizedExpression,FunctionDeclaration:has(>::name[value=compileInjectDependency]) ConditionalExpression:has(>[value*=\"InjectFlags.Host\"])<ParenthesizedExpression",
                    "content": "0"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "FunctionDeclaration:has(>::name[value=compileInjectDependency]) PropertyAccessExpression:has(>::name[value=injectAttribute]):has(>::expression[value=R3])<SyntaxList<CallExpression<PropertyAccessExpression<CallExpression<ReturnStatement<SyntaxList<Block",
                    "content": "{throw new Error('compileInjectDependency')}",
                    "replaceComment": true
                }
            },
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "FunctionDeclaration:has(>::name[value=createCtorDepType]) IfStatement:has(>::expression[value=\"dep.attributeNameType !== null\"]),FunctionDeclaration:has(>::name[value=createCtorDepType]) IfStatement:has(>::expression[value=\"dep.host\"])",
                    "replaceComment": true
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/render3/r3_identifiers.ts",
        "rules": [
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "ClassDeclaration:has(>::name[value=Identifiers]) PropertyDeclaration:not(:has(>::name:is([value=inject],[value=directiveInject],[value=invalidFactory],[value=invalidFactoryDep],[value=invalidFactoryDep],[value=forwardRef],[value=resolveForwardRef],[value=ɵɵdefineInjectable],[value=InjectableDeclaration],[value=FactoryDeclaration],[value=getInheritedFactory])))",
                    "removeComment": true
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "VariableDeclaration:has(>::name[value=CORE]) StringLiteral",
                    "content": "'static-injector'"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/render3/util.ts",
        "rules": [
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "excludes": [
                        "escapeIdentifier"
                    ]
                }
            },
            {
                "type": "function",
                "change": "remove",
                "values": {
                    "excludes": [
                        "prepareSyntheticPropertyName",
                        "prepareSyntheticListenerName",
                        "getSafePropertyAccessString",
                        "prepareSyntheticListenerFunctionName",
                        "jitOnlyGuardedExpression",
                        "devOnlyGuardedExpression",
                        "guardedExpression",
                        "wrapReference",
                        "refsToArray"
                    ]
                }
            },
            {
                "type": "variable",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ANIMATE_SYMBOL_PREFIX"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/core.ts",
        "rules": [
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "EnumDeclaration:has(>::name[value=InjectFlags]) EnumMember:has(>::name:is([value=Host],[value=ForPipe])):use(*,+CommaToken)",
                    "removeComment": true
                }
            },
            {
                "type": "variable",
                "change": "remove",
                "values": {
                    "excludes": [
                        "emitDistinctChangesOnlyDefaultValue",
                        "CUSTOM_ELEMENTS_SCHEMA",
                        "NO_ERRORS_SCHEMA",
                        "Type"
                    ]
                }
            },
            {
                "type": "type",
                "change": "remove",
                "values": {
                    "excludes": [
                        "R3CssSelectorList",
                        "R3CssSelector",
                        "parserSelectorToR3Selector",
                        "parseSelectorToR3Selector"
                    ]
                }
            },
            {
                "type": "function",
                "change": "remove",
                "values": {
                    "excludes": [
                        "parserSelectorToNegativeSelector",
                        "parserSelectorToSimpleSelector",
                        "parserSelectorToR3Selector",
                        "parseSelectorToR3Selector"
                    ]
                }
            },
            {
                "type": "enum",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ViewEncapsulation",
                        "ChangeDetectionStrategy",
                        "SecurityContext",
                        "MissingTranslationStrategy",
                        "SelectorFlags",
                        "RenderFlags",
                        "AttributeMarker"
                    ]
                }
            },
            {
                "type": "interface",
                "change": "remove",
                "values": {
                    "excludes": [
                        "Input",
                        "Output",
                        "HostBinding",
                        "HostListener",
                        "SchemaMetadata",
                        "Type",
                        "guardedExpression",
                        "wrapReference",
                        "refsToArray"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "all": true
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/parse_util.ts",
        "rules": [
            {
                "type": "variable",
                "change": "remove",
                "values": {
                    "excludes": [
                        "_anonymousTypeIndex"
                    ]
                }
            },
            {
                "type": "class",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ParseError"
                    ]
                }
            },
            {
                "type": "enum",
                "change": "remove",
                "values": {
                    "excludes": [
                        "ParseErrorLevel"
                    ]
                }
            },
            {
                "type": "interface",
                "change": "remove",
                "values": {
                    "excludes": [
                        "CompileIdentifierMetadata"
                    ]
                }
            },
            {
                "type": "function",
                "change": "remove",
                "values": {
                    "excludes": [
                        "r3JitTypeSourceSpan",
                        "identifierName",
                        "sanitizeIdentifier"
                    ]
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "all": true
                }
            },
            {
                "type": "custom",
                "change": "remove",
                "values": {
                    "selector": "ClassDeclaration:has(>::name[value=ParseLocation]) MethodDeclaration",
                    "removeComment": true
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/compiler.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './injectable_compiler_2';\nexport * from './render3/r3_factory';\nexport * from './output/output_ast';\nexport * from './render3/util';\nexport * from './parse_util';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler/src/compiler.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/core.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/injectable_compiler_2.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/parse_util.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/output/output_ast.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/render3/r3_factory.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/render3/r3_identifiers.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/render3/util.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/render3/partial/api.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler/src/render3/view/util.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/annotations/common/src/util.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "StringLiteral[value=\"'@angular/core'\"]",
                    "content": "'static-injector'"
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "getOriginNodeForDiagnostics",
                        "resolveImportedFile",
                        "compileResults",
                        "createSourceSpan",
                        "resolveProvidersRequiringFactory",
                        "readBaseClass",
                        "isWrappedTsNodeExpr",
                        "isExpressionForwardReference",
                        "combineResolvers",
                        "isAngularCoreReference",
                        "toR3Reference"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "forwardRefResolver"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "DynamicValue",
                        "CompileResult",
                        "assertSuccessfulReferenceEmit",
                        "ForeignFunctionResolver"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "IfStatement:has(>::expression[value=\"valueRef.defaultImportStatement !== null\"])"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/annotations/src/injectable.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "StringLiteral[value=\"'@angular/core'\"]",
                    "content": "'static-injector'"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "InterfaceDeclaration:has(>::name[value=InjectableHandlerData]) PropertySignature:has(>::name[value=classMetadata]),InterfaceDeclaration:has(>::name[value=InjectableHandlerData]) PropertySignature:has(>::name[value=needsFactory])"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) PropertyDeclaration:has(>::name[value=precedence]),ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) PropertyDeclaration:has(>::name[value=name])"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) Constructor Parameter:has(>::name:is([value=injectableRegistry],[value=perf])):use(*,+CommaToken)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "PropertyAccessExpression:has(>::name[value=perf]):has(>::expression[value=this])<PropertyAccessExpression<CallExpression<ExpressionStatement"
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "decorators"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "MethodDeclaration:has(>::name[value=analyze]) PropertyAssignment:has(>::name:is([value=classMetadata],[value=needsFactory])):use(*,+CommaToken)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) MethodDeclaration:has(>::name[value=symbol]),ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) MethodDeclaration:has(>::name[value=register]),ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) MethodDeclaration:has(>::name[value=resolve]),ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) MethodDeclaration:has(>::name[value=compilePartial]),ClassDeclaration:has(>::name[value=InjectableDecoratorHandler]) MethodDeclaration:has(>::name[value=compileLocal])"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "MethodDeclaration:has(>::name[value=compile]) IfStatement PropertyAccessExpression:has(>::name[value=needsFactory]):has(>::expression[value=analysis])",
                    "content": "true"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "MethodDeclaration:has(>::name[value=compile]) IfStatement:has(>::expression[value=\"analysis.classMetadata !== null\"])"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=getDep]) PropertyAssignment:has(>::name[value=host]):use(*,+CommaToken)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=compileFull]) Identifier[value=compileClassMetadata]:use(*,+CommaToken)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=compile]) Parameter:has(>::name[value=compileClassMetadataFn]):use(*,+CommaToken)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=InjectableDecoratorHandler]) Parameter:has(>::name[value=evaluator]):use(*,+CommaToken)"
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "compileClassMetadata",
                        "CompileClassMetadataFn",
                        "compileDeclareClassMetadata",
                        "compileDeclareInjectableFromMetadata",
                        "R3ClassMetadata",
                        "InjectableClassRegistry",
                        "checkInheritanceOfInjectable",
                        "extractClassMetadata",
                        "HandlerPrecedence",
                        "ResolveResult",
                        "compileDeclareFactory"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "PartialEvaluator",
                        "PerfEvent"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=InjectableDecoratorHandler]) HeritageClause LiteralType:use(*,+CommaToken)"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/imports/src/core.ts",
        "rules": [
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "CORE_SUPPORTED_SYMBOLS",
                        "CORE_MODULE"
                    ]
                }
            },
            {
                "type": "class",
                "values": {
                    "excludes": [
                        "R3SymbolsImportRewriter",
                        "CORE_MODULE"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "validateAndRewriteCoreSymbol"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "relativePathBetween"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/reflection/src/host.ts",
        "rules": [
            {
                "type": "interface-method",
                "values": {
                    "selector": "*:has(>::name[value=ReflectionHost])",
                    "excludes": [
                        "getDefinitionOfFunction",
                        "getDeclarationOfIdentifier",
                        "getExportsOfModule",
                        "getVariableValue",
                        "isStaticallyExported"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/reflection/src/typescript.ts",
        "rules": [
            {
                "type": "class-method",
                "values": {
                    "selector": "*:has(>::name[value=TypeScriptReflectionHost])",
                    "excludes": [
                        "getExportsOfModule",
                        "getDeclarationOfIdentifier",
                        "getDefinitionOfFunction",
                        "getVariableValue",
                        "isStaticallyExported",
                        "getDeclarationOfSymbol",
                        "getLocalExportedDeclarationsOfSourceFile"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "reflectNameOfDeclaration",
                        "reflectIdentifierOfDeclaration",
                        "reflectTypeEntityToDeclaration",
                        "filterToMembersWithDecorator",
                        "findMember"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "Declaration",
                        "DeclarationKind",
                        "FunctionDefinition"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/transform/index.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './src/api';\nexport * from './src/utils';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/transform/src/api.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "type": "enum",
                "values": {
                    "excludes": [
                        "HandlerPrecedence"
                    ]
                }
            },
            {
                "type": "interface",
                "values": {
                    "excludes": [
                        "ResolveResult",
                        "DtsTransform"
                    ]
                }
            },
            {
                "type": "interface-property",
                "values": {
                    "selector": "*:has(>::name[value=DecoratorHandler])",
                    "excludes": [
                        "precedence",
                        "name"
                    ]
                }
            },
            {
                "type": "interface-method",
                "values": {
                    "excludes": [
                        "updateResources",
                        "symbol",
                        "register",
                        "index",
                        "resolve",
                        "xi18n",
                        "typeCheck",
                        "extendedTemplateCheck",
                        "compilePartial",
                        "compileLocal"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=DecoratorHandler]) *:has(>::name[value=compileFull]) Parameter:has(>::name:is([value=resolution],[value=constantPool])):use(*,+CommaToken)"
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "ConstantPool"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "IndexingContext",
                        "TypeCheckContext",
                        "ExtendedTemplateChecker",
                        "Xi18nContext",
                        "SemanticSymbol",
                        "ImportManager",
                        "Reexport"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "InterfaceDeclaration SyntaxList TypeParameter:has(>::name[value=S]):use(*,+CommaToken)"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/transform/src/utils.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/translator/src/translator.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "type": "class-method",
                "values": {
                    "selector": "*:has(>::name[value=ExpressionTranslatorVisitor])",
                    "excludes": [
                        "visitTaggedTemplateExpr",
                        "visitLocalizedString",
                        "createTaggedTemplateExpression",
                        "createES5TaggedTemplateFunctionCall"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "createTemplateElement"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/translator/src/typescript_translator.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/translator/src/api/ast_factory.ts",
        "rules": []
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/util/src/typescript.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "includes": [
                        "identifierOfNode"
                    ]
                }
            },
            {
                "type": "type",
                "values": {
                    "includes": []
                }
            },
            {
                "type": "interface",
                "values": {
                    "includes": []
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "AbsoluteFsPath",
                        "DeclarationNode"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "TS",
                        "D_TS"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/annotations/common/src/di.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=getConstructorDependencies]) IfStatement CallExpression:has(>::expression[value=deps.push]) ShorthandPropertyAssignment:has(>::name[value=host])"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=getConstructorDependencies]) IfStatement:has(>::expression:is([value=\"name === 'Host'\"],[value=\"name === 'Attribute'\"]))>CloseParenToken+Block",
                    "content": "{}"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/annotations/common/src/factory.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "compileDeclareFactory"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "compileDeclareFactoryFunction"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/imports/src/default.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "ImportDeclaration:has(>StringLiteral[value=\"'@angular/compiler'\"]) StringLiteral",
                    "content": "'static-injector/transform/compiler'"
                }
            },
            {
                "type": "class",
                "values": {
                    "excludes": [
                        "DefaultImportTracker"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "getSourceFile",
                        "loadIsReferencedAliasDeclarationPatch"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/annotations/common/index.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './src/di';\nexport * from './src/factory';\nexport * from './src/util';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/diagnostics/index.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './error';\nexport * from './error_code';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/imports/index.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './src/core';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/reflection/index.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './src/host';\nexport * from './src/typescript';\nexport * from './src/util';"
                }
            }
        ]
    },
    {
        "fileName": "./transform/compiler-cli/src/ngtsc/translator/index.ts",
        "rules": [
            {
                "change": "change",
                "type": "custom",
                "values": {
                    "selector": "SourceFile",
                    "content": "export * from './src/context';\nexport * from './src/translator';\nexport * from './src/typescript_ast_factory';\nexport * from './src/typescript_translator';\nexport * from './src/import_manager';"
                }
            }
        ]
    },
    {
        "fileName": "./import/di/create_injector.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/forward_ref.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/initializer_token.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/injectable.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "compileInjectable"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "makeDecorator"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ExportDeclaration ExportSpecifier:has(>::name[value=compileInjectable])<SyntaxList<NamedExports<ExportDeclaration"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "VariableDeclaration:has(>::name[value=Injectable])>CallExpression",
                    "content": "undefined as any"
                }
            }
        ]
    },
    {
        "fileName": "./import/di/injection_token.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "assertLessThan"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=InjectionToken]) Constructor ExpressionStatement[value*=\"__NG_ELEMENT_ID__\"]",
                    "removeComment": true
                }
            }
        ]
    },
    {
        "fileName": "./import/di/injector.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/injector_compatibility.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=ɵɵinvalidFactoryDep]) NeverKeyword",
                    "content": "void"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=convertToBitFlags]) AsExpression[value*=Host]<ParenthesizedExpression",
                    "content": "0"
                }
            },
            {
                "type": "import",
                "change": "remove",
                "values": {
                    "excludes": [
                        "emitInjectEvent"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/di/injector_marker.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/injector_token.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/inject_switch.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "assertInjectImplementationNotEqual"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/di/internal_tokens.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/metadata.ts",
        "rules": [
            {
                "type": "interface",
                "values": {
                    "excludes": [
                        "HostDecorator",
                        "Host"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "Host"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/di/null_injector.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/provider_collection.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "CallExpression:has(>::expression[value=getComponentDef])",
                    "content": "null"
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "getComponentDef",
                        "throwCyclicDependencyError"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "validateProvider",
                        "walkProviderTree",
                        "deepForEachProvider"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/di/provider_token.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/r3_injector.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "getComponentDef",
                        "throwCyclicDependencyError",
                        "emitInstanceCreatedByInjectorEvent",
                        "emitProviderConfiguredEvent",
                        "InjectorProfilerContext",
                        "runInInjectorProfilerContext",
                        "setInjectorProfilerContext",
                        "emitInjectEvent",
                        "setActiveConsumer"
                    ]
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "VariableDeclaration:has(>::name[value=prevInjectContext])<SyntaxList<VariableDeclarationList"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "VariableStatement:like(setActiveConsumer)"
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "ExpressionStatement:like(setActiveConsumer)"
                }
            }
        ]
    },
    {
        "fileName": "./import/di/scope.ts",
        "rules": []
    },
    {
        "fileName": "./import/di/interface/defs.ts",
        "rules": [
            {
                "type": "interface-property",
                "values": {
                    "excludes": [
                        "ɵinj"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "defineInjectable",
                        "NG_INJECTABLE_DEF",
                        "NG_INJECTOR_DEF"
                    ]
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=getInjectableDef]) Identifier[value=NG_INJECTABLE_DEF]<SyntaxList<CallExpression",
                    "content": "null"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=getInheritedInjectableDef]) ElementAccessExpression:has([value*=NG_INJECTABLE_DEF])",
                    "content": "null"
                }
            },
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "*:has(>::name[value=getInjectorDef]) Identifier[value=NG_INJECTOR_DEF]<SyntaxList<CallExpression",
                    "content": "false"
                }
            }
        ]
    },
    {
        "fileName": "./import/di/interface/injector.ts",
        "rules": [
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=InjectFlags]) *:has(>::name[value=Host]):use(*,+CommaToken)",
                    "removeComment": true
                }
            },
            {
                "type": "custom",
                "values": {
                    "selector": "*:has(>::name[value=InternalInjectFlags]) *:has(>::name:is([value=Host],[value=ForPipe])):use(*,+CommaToken)",
                    "removeComment": true
                }
            }
        ]
    },
    {
        "fileName": "./import/di/interface/provider.ts",
        "rules": []
    },
    {
        "fileName": "./import/interface/lifecycle_hooks.ts",
        "rules": [
            {
                "type": "interface",
                "values": {
                    "excludes": [
                        "OnChanges",
                        "OnInit",
                        "DoCheck",
                        "AfterContentInit",
                        "AfterContentChecked",
                        "AfterViewInit",
                        "AfterViewChecked"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "SimpleChanges"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/interface/type.ts",
        "rules": []
    },
    {
        "fileName": "./import/render3/definition_factory.ts",
        "rules": []
    },
    {
        "fileName": "./import/render3/di.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "InjectorMarkers",
                        "assertDefined",
                        "assertDirectiveDef",
                        "registerPreOrderHooks",
                        "DirectiveDef",
                        "isFactory",
                        "AttributeMarker",
                        "isComponentDef",
                        "DECLARATION_COMPONENT_VIEW",
                        "assertTNodeType",
                        "enterDI",
                        "isNameOnlyAttributeMarker",
                        "getParentInjectorIndex",
                        "throwCyclicDependencyError",
                        "stringifyForError",
                        "ProviderToken",
                        "injectRootLimpMode",
                        "emitInstanceCreatedByInjectorEvent",
                        "InjectorProfilerContext",
                        "runInInjectorProfilerContext",
                        "setInjectorProfilerContext",
                        "TContainerNode"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "namedImports": [
                        "NG_ELEMENT_ID"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "includeViewProviders",
                        "BLOOM_SIZE",
                        "BLOOM_MASK",
                        "BLOOM_BUCKET_BITS",
                        "nextNgElementId",
                        "NOT_FOUND"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "setIncludeViewProviders",
                        "bloomAdd",
                        "getOrCreateNodeInjectorForNode",
                        "getInjectorIndex",
                        "getParentInjectorLocation",
                        "diPublicInInjector",
                        "injectAttributeImpl",
                        "notFoundValueOrThrow",
                        "lookupTokenUsingModuleInjector",
                        "getOrCreateInjectable",
                        "lookupTokenUsingNodeInjector",
                        "searchTokensOnInjector",
                        "locateDirectiveOrProvider",
                        "getNodeInjectable",
                        "bloomHashBitOrFactory",
                        "bloomHasToken",
                        "shouldSearchParent",
                        "NodeInjector",
                        "createNodeInjector",
                        "lookupTokenUsingEmbeddedInjector",
                        "getTNodeFromLView",
                        "insertBloom",
                        "getNodeInjectorLView",
                        "getNodeInjectorTNode"
                    ]
                }
            },
            {
                "type": "class",
                "values": {
                    "excludes": [
                        "NodeInjector"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/render3/errors_di.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "includes": [
                        "throwProviderNotFoundError"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/render3/fields.ts",
        "rules": [
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "NG_COMP_DEF",
                        "NG_DIR_DEF",
                        "NG_PIPE_DEF",
                        "NG_MOD_DEF",
                        "NG_ELEMENT_ID"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/render3/instructions/di.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "ConditionalExpression:has(>::condition[value*=ngDevMode])",
                    "content": "'invalid'"
                }
            },
            {
                "type": "import",
                "values": {
                    "all": true
                }
            },
            {
                "type": "function",
                "values": {
                    "includes": [
                        "ɵɵinvalidFactory"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/render3/util/stringify_utils.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "debugStringifyTypeForError",
                        "stringifyTypeFromDebugInfo"
                    ]
                }
            },
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "NG_COMP_DEF"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/util/array_utils.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "excludes": [
                        "assertEqual"
                    ]
                }
            },
            {
                "type": "function",
                "values": {
                    "includes": [
                        "newArray",
                        "deepForEach"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/util/closure.ts",
        "rules": []
    },
    {
        "fileName": "./import/util/decorators.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "makeDecorator",
                        "makePropDecorator"
                    ]
                }
            },
            {
                "type": "variable",
                "values": {
                    "excludes": [
                        "ANNOTATIONS",
                        "PROP_METADATA"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/util/empty.ts",
        "rules": [
            {
                "type": "import",
                "values": {
                    "all": true
                }
            }
        ]
    },
    {
        "fileName": "./import/util/property.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "fillProperties"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/util/stringify.ts",
        "rules": [
            {
                "type": "function",
                "values": {
                    "excludes": [
                        "concatStringsWithSpace"
                    ]
                }
            }
        ]
    },
    {
        "fileName": "./import/render3/errors_di.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "BinaryExpression:has(>Identifier[value=ngDevMode])",
                    "content": "null"
                }
            }
        ]
    },
    {
        "fileName": "./import/di/index.ts",
        "rules": [
            {
                "type": "custom",
                "change": "change",
                "values": {
                    "selector": "SourceFile",
                    "content": "export {ProviderToken} from './provider_token';"
                }
            }
        ]
    }
]